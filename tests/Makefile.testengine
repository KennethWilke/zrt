#Note1: SPECIFY TESTS_ROOT
ifndef MEMMAX
MEMMAX=268435456
endif

#Note2: RELEASE VERSION OF ZEROVM
#Given Makefile - test runner using release build of zerovm

#default types of channels we specifying from make
DEF_CHANTYPE1=0
DEF_CHANTYPE2=0
DEF_CHANTYPE3=1

#mount/remount tar archives
TEST_TAR=$(CURDIR)/foo.tar
TEST_TAR_MOUNT=$(CURDIR)/mount.tar
TEST_TAR_REMOUNT=$(CURDIR)/remount.tar
#file inside both archives
TESTFILE=testfile.1234


OUTPUT_LAST=last_test.output
OUTPUT_FAIL=fail_tests.output
TEST_INCLUDES=$(shell find $(TESTS_ROOT) -name "*.h")
TEST_SOURCES=$(shell find $(TESTS_ROOT) -name "*.c")
TEST_OBJECTS=$(addsuffix .o, $(basename $(TEST_SOURCES) ) )
TEST_NVRAMS=$(addsuffix .nvram, $(basename $(TEST_SOURCES) ) )
TEST_MANIFESTS=$(addsuffix .manifest, $(basename $(TEST_SOURCES) ) )
TEST_STDOUTS=$(addsuffix .stdout.std, $(basename $(TEST_SOURCES) ) )
TEST_STDERRS=$(addsuffix .stderr.std, $(basename $(TEST_SOURCES) ) )
TEST_LOG_ZVM=$(addsuffix .zerovm.log, $(basename $(TEST_SOURCES) ) )
TEST_LOG_DEBUG=$(addsuffix .zrtdebug.log, $(basename $(TEST_SOURCES) ) )
TEST_NEXES=$(patsubst %.o, %.nexe, $(TEST_OBJECTS))
TEST_LIST=$(basename $(TEST_SOURCES) )
COUNTER=0

#get pipe from zerovm and parse output
#in case if has to many columns then mark it as error and merge 3 lines into output
AWK_GET_ERRCODE=awk '{ \
RESULT="FAIL"; \
if ( NR == 1 && NF > 1) { RETCODE=1; printf "%s %s",RESULT, $$0 } \
if ( (NR == 2 || NR == 3 ) && NF > 1) { RETCODE=1; printf "%s", $$0 } \
else if (NR == 3) { RETCODE=$$1 } \
if (NR == 6) { \
	if (RETCODE == 0) { RESULT="PASS" } \
	else { RESULT="FAIL" } \
	if ($$0 != "ok") { RESULT="FAIL" } \
	print RESULT,"zvmstatus=",$$0 \
} \
}'

#save failed tests to display it in report
#if string does not contain PASS, then output error
AWK_HANDLE_FAIL=awk '{\
if ( match($$0, "PASS zvmstatus") == 0 ) {\
	print testname, $$0 \
	}\
}' 

TESTBASE=
EXCL=

CFLAGS+=-g #debug
CFLAGS+=-std=gnu99
CFLAGS+=-D_GNU_SOURCE
CFLAGS+=-Wno-long-long -m64
CFLAGS+=-Werror-implicit-function-declaration
CFLAGS+=-I.. -I. 
CFLAGS+=-Iinclude
CFLAGS+=-I$(ZRT_ROOT)/lib

#in order to correectly link glibs substituted functions libzrt should be linked twice
#before object file and after
#For rt tests
LDFLAGS+= -lrt
#For dlopen
LDFLAGS+= -ldl
#math
LDFLAGS+= -lm
#crypt
LDFLAGS+= -lcrypt
#networking mapreduce
LDFLAGS+= -lmapreduce -lnetworking

#uncomment below one if want to display clean files
#VERBOSE_CLEAN=-v

all: clean prepare $(ZEROVM) $(TEST_NEXES) report

resume:$(ZEROVM) $(TEST_NEXES)

clean:
	@find -name "*.scp" | xargs rm -f $(VERBOSE_CLEAN)
	@rm -f $(VERBOSE_CLEAN) $(OUTPUT_LAST)
	@rm -f $(VERBOSE_CLEAN) $(OUTPUT_FAIL)
	@rm -f $(VERBOSE_CLEAN) $(TEST_OBJECTS)
	@rm -f $(VERBOSE_CLEAN) $(TEST_STDOUTS)
	@rm -f $(VERBOSE_CLEAN) $(TEST_STDERRS)
	@rm -f $(VERBOSE_CLEAN) $(TEST_LOG_ZVM)
	@rm -f $(VERBOSE_CLEAN) $(TEST_NEXES)
	@rm -f $(VERBOSE_CLEAN) $(TEST_MANIFESTS)
	@rm -f $(VERBOSE_CLEAN) $(TEST_NVRAMS)
	@rm -f $(VERBOSE_CLEAN) $(TEST_LOG_DEBUG)
	@rm -f $(VERBOSE_CLEAN) $(MOUNT_TAR_NAME) $(REMOUNT_TAR_NAME) $(TEST_TAR)

prepare:
	@rm -f ${TEST_TAR_MOUNT} ${TEST_TAR_REMOUNT} ${TESTFILE}
	@echo "mount" > ${TESTFILE}
	@tar -cf ${TEST_TAR_MOUNT} ${TESTFILE}
	@echo "remount" > ${TESTFILE}
	@tar -cf ${TEST_TAR_REMOUNT} ${TESTFILE}

$(ZEROVM):
	$(error "$(ZEROVM) does not exist")

$(TEST_NEXES): $(TEST_SOURCES) $(TEST_INCLUDES)
#increase test counter
	$(eval COUNTER:=$(shell echo $$(($(COUNTER)+1))) )
#prrepare variables
	$(eval BASENAME:=$(basename $@))
	$(eval NAMEONLY:=$(notdir $(BASENAME)))
	$(eval SPECIFIC_TEST_FLAGS:=$(CFLAGS-$(NAMEONLY).c))
	$(eval SPECIFIC_TEST_CMDLINE:=$(CMDLINE-$(NAMEONLY).c))
	$(eval SPECIFIC_TEST_ENV:=$(ENV-$(NAMEONLY).c))
	$(eval SPECIFIC_TEST_MAPPING:=$(MAPPING-$(NAMEONLY).c))
	$(eval SPECIFIC_TEST_FSTAB:=$(FSTAB-$(NAMEONLY).c))
	$(eval SPECIFIC_TEST_PRECACHE:=$(PRECACHE-$(NAMEONLY).c))
	$(eval SPECIFIC_TEST_FORK=$(FORK-$(NAMEONLY).c))
#channels testing suport
	$(eval SPECIFIC_TEST_CHANTYPE1:=$(firstword $(CHANTYPE1-$(NAMEONLY).c) $(DEF_CHANTYPE1)))
	$(eval SPECIFIC_TEST_CHANTYPE2:=$(firstword $(CHANTYPE2-$(NAMEONLY).c) $(DEF_CHANTYPE2)))
	$(eval SPECIFIC_TEST_CHANTYPE3:=$(firstword $(CHANTYPE3-$(NAMEONLY).c) $(DEF_CHANTYPE3)))
	@echo "RUN TEST $@ "
#compile
	@$(CC) -c -o $(BASENAME).o $(CFLAGS) $(SPECIFIC_TEST_FLAGS) $(BASENAME).c
	@$(CC) -o $@ $(BASENAME).o $(LDFLAGS)
#prepare scripts for debug purposes with GDB
	@sed s@{NEXE_FULL_PATH}@$(CURDIR)/$(BASENAME).nexe@g $(ZRT_ROOT)/gdb_commands.template > $(CURDIR)/$(BASENAME).scp
#prepare manifest
	@sed s@{OUTFILE}@$(CURDIR)/$(BASENAME)@g manifest_tests.template | \
	 sed s@{ABS_PATH}@$(CURDIR)/@g | \
	 sed s@{CHANTYPE1}@$(SPECIFIC_TEST_CHANTYPE1)@g | \
	 sed s@{CHANTYPE2}@$(SPECIFIC_TEST_CHANTYPE2)@g | \
	 sed s@{CHANTYPE3}@$(SPECIFIC_TEST_CHANTYPE3)@g | \
	 sed s@{MOUNTS_PATH}@$(ZRT_ROOT)/mounts/@g | \
	 sed s@{JOB}@$(SPECIFIC_TEST_FORK)@g | \
	 sed s@{TAR_MOUNT}@$(TEST_TAR)@g | \
	 sed s@{MEMMAX}@$(MEMMAX)@g > $(CURDIR)/$(BASENAME).manifest
#prepare nvram
	@sed s@{ENVIRONMENT}@"$(SPECIFIC_TEST_ENV)"@g nvram_tests.template | \
	 sed s@{MAPPING}@"$(SPECIFIC_TEST_MAPPING)"@g | \
	 sed s@{FSTAB}@"$(SPECIFIC_TEST_FSTAB)"@g | \
	 sed s@{PRECACHE}@"$(SPECIFIC_TEST_PRECACHE)"@g | \
	 sed s@{SECONDS}@"seconds=$(shell date +%s)"@g | \
	 sed s@{BR}@'\n'@g | \
	 sed s@{COMMAND_LINE}@"$(SPECIFIC_TEST_CMDLINE)"@g > $(CURDIR)/$(BASENAME).nvram
#Run test under zerovm and display returned error code
#$shell should could not be used to get test result from file because it unexpectadly
#using contents of previosly saved test output, and it is the main reason why using awk;
#parsing correct output retrieved via pipe
#todo: check  big file support without -l option
	@cp -f ${TEST_TAR_MOUNT} ${TEST_TAR};
	@$(ZEROVM) $(CURDIR)/$(BASENAME).manifest -P \
	| $(AWK_GET_ERRCODE) \
	| $(AWK_HANDLE_FAIL) testname="$@"  2>&1 | tee -a $(OUTPUT_FAIL)
	$(eval FORKED_PID:=$(shell echo `pgrep -f $(CURDIR)/$(BASENAME).manifest`))
#If session was forked by zfork() and socket file exist then restore forked session now
#rewrite tar image to test remount
	@if [ "${SPECIFIC_TEST_FORK}" != "" ] && [ -S "${SPECIFIC_TEST_FORK}" ] ; then \
	rm -f ${TEST_TAR}; cp -f ${TEST_TAR_REMOUNT} ${TEST_TAR}; \
	echo "RUN FORKED TEST $@ "; \
	cat $(CURDIR)/$(BASENAME).manifest \
	| python ../daemon_client.py "${SPECIFIC_TEST_FORK}" 2>&1 \
	| $(AWK_GET_ERRCODE) \
	| $(AWK_HANDLE_FAIL) testname="$@ FORK" | tee -a $(OUTPUT_FAIL) ; \
	rm -f ${SPECIFIC_TEST_FORK} ; \
	fi;

report: $(OUTPUT_FAIL)
#display tests resuts
	@sleep 1
	@echo --------------------------------------------
	@echo $(COUNTER) tests was executed
	@echo -n "Failed "
	@echo -n `cat $(OUTPUT_FAIL) | wc -l`
	@echo " tests:"
	@cat $(OUTPUT_FAIL)
	@rm -f $(OUTPUT_FAIL) $(OUTPUT_LAST)
	@pkill zerovm | true

$(OUTPUT_FAIL):
#has no output fail if this rule is active
	$(error Nothing output)
