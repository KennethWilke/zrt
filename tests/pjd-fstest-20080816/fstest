#!/bin/bash

#It's executable script is wrapper around fstest.nexe
#that prepare nexe environment and launches zerovm in background
#input parameters of script that was invoked by prove testsystem
#is writing into STDIN input file of fstest.nexe.
#nexe running on background and reading input parameters while
#not readed killdata sent by kill_fstest.sh script
 
SCRIPT=$(readlink -f "$0")
CURDIR=`dirname "$SCRIPT"`

STDIN=data/fstest.stdin.data
STDOUT=data/fstest.stdout.data
STDERR=data/fstest.stderr.data
ZEROVM_OUTPUT=data/zerovm.output

#get printable characters count via var COUNT
COUNT=0
function file_characters_count {
    CONTENTS=`strings $1 2> /dev/null`
    COUNT=`echo $CONTENTS | wc -c | cut -d' ' -f1`
}

NAME=fstest
COMMAND_LINE="$@"


#############################################
# if searched running fstest copy
# then write command line parameters into input channel
#############################################
file_characters_count $STDERR
FERRCOUNT=$COUNT
file_characters_count $STDOUT
FOUTCOUNT=$COUNT

#echo foutcount $FOUTCOUNT
#echo ferrcount $FERRCOUNT
echo fstest "${COMMAND_LINE}" >> ${STDIN}

#############################################
# if no running copy then launch new instance at background
#############################################

p=`pgrep -f "zerovm -Mfstest.manifest"`
if [ "$p" = "" ]
then
    rm -f ${STDOUT} ${STDERR}
    DATE=`date`
    setarch x86_64 -R ${ZEROVM_ROOT}/zerovm -M${NAME}.manifest -v2 > ${ZEROVM_OUTPUT} &
fi

#############################################
# wait while zerovm write new data into stdout or stderr
# and print tails of these files
#############################################

FERR_UPDATED=$FERRCOUNT
FOUT_UPDATED=$FOUTCOUNT
#echo ferrsize $FERRSIZE
#echo foutsize $FERRSIZE
#should be used -le operator but not -ne because sometimes file size calculates wrong and get 0
#file size can only grow
while [ $FERR_UPDATED -le $FERRCOUNT ] && [ $FOUT_UPDATED -le $FOUTCOUNT ]
do
    file_characters_count $STDERR
    FERR_UPDATED=$COUNT
    file_characters_count $STDOUT
    FOUT_UPDATED=$COUNT
done
#echo ferrsize $FNEWSIZE
#echo foutsize $FNEWSIZE

RESULT=`tail -n2 ${STDOUT} 2> /dev/null | cut -d' ' -f1`
#echo result $RESULT
if [ "$RESULT" = "0" ]
then
    #tail -n2 ${STDERR} 2> /dev/null
    tail -n1 ${STDOUT} 2> /dev/null
    exit 0
else
    #tail -n2 ${STDERR} 2> /dev/null
    #it is enough 1 line output as no new line in log 
    tail -n1 ${STDOUT} 2> /dev/null
    exit 1
fi

