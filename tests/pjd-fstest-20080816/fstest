#!/bin/bash

#It's executable script is wrapper around fstest.nexe
#that prepare nexe environment and launches zerovm in background
#input parameters of script that was invoked by prove testsystem
#is writing into STDIN input file of fstest.nexe.
#nexe running on background and reading input parameters while
#not readed killdata sent by kill_fstest.sh script
 
SCRIPT=$(readlink -f "$0")
CURDIR=`dirname "$SCRIPT"`

TEMP_FILE=data/newf1
FIFO_FOR_INPUT=data/fstest.fifo.input
FIFO_FOR_OUTPUT=data/fstest.fifo.output
STDIN=data/fstest.stdin.data
STDOUT=data/fstest.stdout.data
STDERR=data/fstest.stderr.data
ZEROVM_OUTPUT=data/zerovm.output

NAME=fstest
COMMAND_LINE="$@"

#############################################
# if no running copy then launch new instance at background
#############################################

p=`pgrep -f "zerovm -Mfstest.manifest"`
if [ "$p" = "" ]
then
    rm -f ${FIFO_FOR_INPUT} ${FIFO_FOR_OUTPUT} ${STDOUT} ${STDIN} ${STDERR} ${TEMP_FILE}
    mkfifo ${FIFO_FOR_INPUT} ${FIFO_FOR_OUTPUT}
    setarch x86_64 -R ${ZEROVM_ROOT}/zerovm -M${NAME}.manifest -v4 > ${ZEROVM_OUTPUT} &
    sleep 1
    p=`pgrep -f "zerovm -Mfstest.manifest"`
fi

#############################################
# if fstest copy already running then write 
# command line parameters into input channel
#############################################
#it is a way send to zerovm stdin any required data

#STDIN file just a file for storing of history
echo fstest "${COMMAND_LINE}" >> $STDIN
#FIFO for input into zerovm
echo fstest "${COMMAND_LINE}" > ${FIFO_FOR_INPUT} &

#############################################
# wait while zerovm write new data into stdout or stderr
# and print tails of these files
#############################################

#cat will wait while pipe data not available, it will be available when 
#zerovm will get response back

cat ${FIFO_FOR_OUTPUT} > ${TEMP_FILE}
cat ${TEMP_FILE} >> ${STDERR}

RESULT=`cat ${TEMP_FILE}`

echo $RESULT

if [ "$RESULT" = "0" ]
then
    exit 0
else
    exit 1
fi

