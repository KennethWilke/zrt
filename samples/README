warning: this file is obsolete.
todo(d'b): update it with a new samples
-------------------------------------------

this folder contain both samples of zerovm usage and functional tests (especially in "security/" folder)

accessors/
  test for a new part of zerovm api. this part provided by zrt, so this is not strictly saying "api", but
  wrappers for UserSetup object.
  
command_line/
  demonstrates argc/argv passed via manifest (CommandLine keyword)

disort/
  distributed sorting, contains 3 types of applications that interacts as nodes, that implements networking communication; 
  it uses files as one-to-one network channels. For local sort it uses bitonic sort for sse41 instructions set or 
  qsort from c std library for another cpu instructions set. Currently network organized by 
  10 source, 10 destination and one manager nodes. Count of nodes and amount of sorting data are possible to configurate;   
  
reqrep/
  example uses network facility, it's emulate simple network, where two nodes is communicating one to one. 
  Single node sending 100MB and recevies the same from another node.
  
sqlite/
  example demonstrate sqlite work under zerovm. database reading from stdin input, next it's exec query and puts result
  to the stdout; it's get sql query string from an command line. Currently DB is opening in READ_ONLY mode;   
  
lua-scripting/
  porting to zerovm LUA scripting language. lua.manifest can run lua.nexe interpreter which read
  script file from stdin and write results into output; Files io does not supported now;  
  
file_io/
  example of indirect usage of zrt_read(), zrt_write() and zrt_lseek(). user program can use zrt via libc functions like:
  read(), write(), printf(), rewind() e.t.c.
  
file_stat/
  addition to "file_io". demonstrates stat() / fstat(). user can get synthetic information about zerovm channels (streams)
  
hello/
  simple example how to write a program for zerovm using zerovm api.
  
malloc/
  demonstration of a new memory manager. zerovm can shrink user memory to size specified in manifest. if
  MemMax isn't specified 4gb will be used (however user can get memory allocation error). preallocation
  will solve to problems: memory allocation errors and real syscalls usage due nexe runtime
  
manifest/
  full list of available keywords in manifest example

sort/
  contains 3 programs which allows to create random data, sort it and test sort order. from this example you can
  see how to use intrinsics in nacl modules - absolutely same as usual. also this is another example of pagination
  mechanism usage.

sort_paging/
  same "sort/" with i/o via zerovm api. also this example doesn't use mapped channels (except stderr)
  
strtol/
  just a simple demonstration of conversions integers and floats
  
time/
  via zerovm api user program can get date/time specified in manifest by "TimeStamp" keyword. if there is no such keyword in
  manifest user program will get -1 (1969-12-31 time = 23:59:59 UTC)

